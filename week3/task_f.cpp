// F. Трехмерные ладьи

// Игра в трёхмерные шахматы ведется на кубическом поле N×N×N.
// Трёхмерная ладья может ходить на любое число клеток по прямой в любом из шести направлений
// (в любую сторону в каждом из трёх направлений).

// На таком поле расставлены K ладей. Напишите программу, которая определит, бьют они всё поле или нет.

// Формат ввода:
// В первой строке входного файла записано натуральное число N (1 ≤ N ≤ 1000), задающее размеры игрового куба,
// и количество ладей K (0 ≤ K ≤ 10^6).
// Далее записано K троек чисел, задающих координаты ладей (координата по каждому измерению
//     — натуральное число от 1 до N).

// Формат вывода:
// Выведите в выходной файл слово YES, если эти ладьи бьют весь куб, и слово NO в противном случае.
// В случае NO выведите во второй строке координаты какой-нибудь клетки, которая не бьется ни одной из ладей.

#include <iostream>
#include <bitset>

int main() {
    unsigned short int n;
    int k;
    std::cin >> n >> k;

    std::bitset<1000> surfaceYX[1000];
    std::bitset<1000> surfaceZX[1000];
    std::bitset<1000> surfaceYZ[1000];
    for (int i = 0; i < k; ++i) {
        unsigned short int x, y, z;
        std::cin >> x >> y >> z;
        --x;
        --y;
        --z;
        surfaceYX[y][x] = 1;
        surfaceZX[z][x] = 1;
        surfaceYZ[y][z] = 1;
    }

    for (int y = 0; y < n; ++y) {
        for (int z = 0; z < n; ++z) {
            if (surfaceYZ[y][z] == 0) {
                std::bitset<1000> result = (surfaceYX[y] | surfaceZX[z]);
                result = (~result << (1000 - n));
                if (result != 0) {
                    unsigned short int cur_x = n - 1;
                    while (result[1000 - n + cur_x] != 1) {
                        --cur_x;
                    }
                    std::cout << "NO" << std::endl;
                    std::cout << cur_x + 1 << " " << y + 1 << " " << z + 1;
                    return 0;
                }
            }
        }
    }
    std::cout << "YES";
    return 0;
}