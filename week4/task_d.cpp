// D. Переключение между окнами

// Когда пользователь работает в операционной системе Windows, у него часто запущено несколько приложений. 
// Каждое из приложений работает в отдельном окне. Для переключения между окнами используется комбинация клавиш ”Alt+Tab”. 
// Эта комбинация делает активным окно, в котором пользователь работал перед тем, как перейти в текущее активное окно.

// Чтобы переключиться в другое окно, можно нажать клавишу ”Alt” и затем, не отпуская её, несколько раз нажать клавишу ”Tab”. 
// Чтобы понять, какое окно станет активным после этого, воспользуемся следующей моделью. Пусть запущено 
// n
// n приложений. Приложения в операционной системе организованы в виде списка 
// и упорядочены по убыванию времени последней активности. 
// То есть приложение, окно которого является активным в настоящий момент — первое в списке, 
// приложение, окно которого было активно перед этим — второе, и т. д.

// Если нажать клавишу ”Alt” и затем, не отпуская её, нажать клавишу ”Tab” k раз, 
// то активным станет окно приложения, которое находится на (k%n)+1-м месте в списке. 
// Здесь a%b означает остаток от деления a на b. 
// Иными словами, операционная система рассматривает список как циклический, 
// переходя после последнего элемента списка к первому.

// При запуске нового приложения оно добавляется в начало списка.

// Задана последовательность действий пользователя, где каждое действие — либо запуск приложения, либо переключение между окнами. 
// Выведите список имён приложений в том порядке, в котором с ними работал пользователь.

// Формат ввода
// В первой строке вводится целое число n — количество действий пользователя (1≤n≤1000). 
// Следующие n строк содержат описание действий пользователя.

// Запуск приложения описывается строкой ”Run <имя приложения>”. 
// Здесь ”<имя приложения>” — строка из не более чем 100 латинских букв, цифр и пробелов. 
// Она отделена от слова ”Run” ровно одним пробелом. Все имена приложений различны. 
// Большие и маленькие буквы считаются различными.

// Переключение между приложениями описывается строкой ”Alt+Tab+...+Tab”, здесь подстрока ”+Tab” повторена в точности столько раз,
// сколько раз пользователь нажал клавишу ”Tab”, не отпуская клавишу ”Alt”. Это количество не превышает 100.

// Первая команда во входных данных — всегда команда ”Run”.

// Формат вывода
// Выведите n строк — последовательность имён приложений, 
// с которыми работал пользователь в порядке, в котором их окна становились активными.

#include <iostream>
#include <string>

class List {
public:
    List() : head(nullptr), size(0) {};

    void PushFront(std::string value) {
        Node* newNode = new Node;
        newNode->next = head;
        newNode->value = value;
        head = newNode;
        ++size;
    }

    std::string MoveToFront(int index) {
        if (index == 0) {
            return head->value;
        }
        Node* prevNode = head;
        Node* curNode = head->next;
        for (int i = 1; i < index; ++i) {
            prevNode = curNode;
            curNode = curNode->next;
        }
        prevNode->next = curNode->next;
        curNode->next = head;
        head = curNode;
        return head->value;
    }

    size_t Size() {
        return size;
    }

    void Clear() {
        while (head != nullptr) {
            Node* deleteNode = head;
            head = head->next;
            delete deleteNode;
        }
    }

private:
    struct Node {
        std::string value;
        Node* next;
    };
    Node* head;
    size_t size;
};

int main() {
    int n;
    std::cin >> n;
    List programList;
    for (int i = 0; i < n; ++i) {
        std::string command;
        std::cin >> command;
        if (command == "Run") {
            std::string program;
            std::getline(std::cin, program);
            if (program != "") {
                program = program.substr(1, program.length() - 1);
            }
            programList.PushFront(program);
            std::cout << program << std::endl;
        } else {
            int count = 0;
            std::string sub = "+Tab";
            for (size_t offset = command.find(sub); offset != std::string::npos; offset = command.find(sub, offset + sub.length())) {
                ++count;
            }
            std::cout << programList.MoveToFront(count % programList.Size()) << std::endl;
        }
    }
    programList.Clear();
    return 0;
}
